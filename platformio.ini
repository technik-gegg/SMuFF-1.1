; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html
[platformio]
default_envs = BIGTREE_SKR_MINI, BIGTREE_SKR_MINI_SD, SMUFF_ESP32
#default_envs = BIGTREE_SKR_13, FYSETC_AIOII, FYSETC_AIOII_SD

[common]
lib_deps      =
    # SD-Card file system library
    SdFs
    # JSON library for the configuration file
    ArduinoJson@6
    # LC-Display library
    U8g2
    # Rotary-Encoder library
    #https://github.com/Den-W/encoder.git
    #Free memory library
    https://github.com/McNeight/MemoryFree
    # FastLED library - use fork FastLED-STM32 instead of original one
    # because of the compile time circular reference issues
    #FastLED@>=3.3.3
    https://github.com/13rac1/FastLED-STM32.git
build_flags   = -D SMUFF_V5
                -D xDEBUG
                -Wno-unused-variable
build_unflags =

#
# Please note: From version 2.x the 8-bit ATMega is
# no longer supported and may fail to compile.
#
# WANHAO I3-Mini
#
[env:WANHAO_I3_MINI]
platform      = atmelavr
framework     = arduino
board         = megaatmega2560
build_flags   = -D __BRD_I3_MINI
                -D __AVR__
                -I include/Wanhao_i3_mini
build_unflags = $(common.build_unflags)
lib_deps      = ${common.lib_deps}
upload_port   = COM[35]
monitor_speed = 57600

#
# SMUFF ESP32
#
# This is a specific controller board built for the SMuFF
# based on a ESP32 microcontroller.
#
# For more information about it visit: https://{_smuff_esp32_controller_board_website_}.com
#
[env:SMUFF_ESP32]
platform               = espressif32
framework              = arduino
board                  = esp32doit-devkit-v1
build_flags            = -D __BRD_ESP32
                         -D __ESP32__
                         -D __xDEBUG_BT__
                         -D USE_TWI_DISPLAY
                         #-D USE_MKS_2_0_DISPLAY
                         #-D USE_MKS_2_1_DISPLAY
                         -D USE_FASTLED_BACKLIGHT
                         -D LOG_LOCAL_LEVEL=ESP_LOG_DEBUG
                         -I include/ESP32
                         -Wl,--wrap=__wrap_u8g2_UserInterfaceMessage
lib_deps               = https://github.com/lbernstone/Tone.git
                         ${common.lib_deps}
upload_port            = COM[3]
monitor_speed          = 115200
board_build.partitions = custompart.csv


#
# BIGTREETECH SKR MINI V1.1
#
[env:BIGTREE_SKR_MINI]
platform         = ststm32
framework        = arduino
board            = genericSTM32F103RC
board_build.core = maple
build_flags      = ${common.build_flags}
                   -std=gnu++14
                   -g
                   -I include/SKR_mini
                   -D __BRD_SKR_MINI
                   -D __STM32F1__
                   -D USE_TWI_DISPLAY
                   #-D USE_ANET_DISPLAY
                   #-D USE_FYSETC_2_1_DISPLAY
                   #-D USE_MKS_2_0_DISPLAY
                   #-D USE_MKS_2_1_DISPLAY
                   #-D USE_FASTLED_BACKLIGHT
                   -D ENABLE_USB_SERIAL
                   -D USBD_USE_CDC
                   -D USBCON
                   # Vendor STM (hardcoded to 0x1eaf in usb_cdcadm.c)
                   #-D LEAFLABS_ID_VENDOR=0x0483
                   # Product Virtual COM Port (hardcoded to 0x0004 in usb_cdcacm.c)
                   #-D MAPLE_ID_PRODUCT=0x5740
                   #-D HAL_PCD_MODULE_ENABLED
                   -Wl,--wrap=u8x8_byte_arduino_2nd_hw_spi,--wrap=__wrap_u8g2_UserInterfaceMessage
build_unflags    = -std=gnu++11 $(common.build_unflags)
lib_deps         = ${common.lib_deps}
monitor_speed    = 115200
upload_protocol  = stlink
#upload_protocol = dfu
debug_tool       = stlink

#
# BIGTREETECH SKR MINI V1.1 (flashing through SDcard, using the default bootloader)
#
[env:BIGTREE_SKR_MINI_SD]
platform             = ststm32
framework            = arduino
board                = genericSTM32F103RC
board_build.core     = maple
build_flags          = ${common.build_flags}
                       -std=gnu++14
                       -g
                       -I include/SKR_mini
                       -D __BRD_SKR_MINI
                       -D __STM32F1__
                       -D USE_TWI_DISPLAY
                       #-D USE_ANET_DISPLAY
                       #-D USE_FYSETC_2_1_DISPLAY
                       #-D USE_MKS_2_0_DISPLAY
                       #-D USE_MKS_2_1_DISPLAY
                       #-D USE_FASTLED_BACKLIGHT
                       -D ENABLE_USB_SERIAL
                       -D USBD_USE_CDC
                       -D USBCON
                       #-D USBD_VID=0x1EAF
                       #-D USB_MANUFACTURER="LeafLabs"
                       #-D USB_PRODUCT="MAPLE R3"
                       -Wl,--wrap=u8x8_byte_arduino_2nd_hw_spi,--wrap=__wrap_u8g2_UserInterfaceMessage
build_unflags        = -std=gnu++11 $(common.build_unflags)
extra_scripts        = include/SKR_mini/STM32F103RC_SKR_MINI.py
board_build.ldscript = include/SKR_mini/STM32F103RC_SKR_MINI_256K.ld
lib_deps             = ${common.lib_deps}

# !!! DO NOT USE - EXPERIMENTAL !!!
# Will fail to compile because of the lacking
# Arduino framework for this MCU.
#
# BIGTREETECH SKR 1.3
#
[env:BIGTREE_SKR_13]
platform        = https://github.com/p3p/pio-nxplpc-arduino-lpc176x/archive/master.zip
framework       = arduino
board           = nxp_lpc1768
build_flags     = ${common.build_flags}
                  -g
                  -I include/SKR_13
                  -D __BRD_SKR_13
                  -D __NXP__
                  -D USE_TWI_DISPLAY
build_unflags   = $(common.build_unflags)
lib_ldf_mode    = off
lib_compat_mode = strict
lib_deps        = https://github.com/p3p/pio-framework-arduino-lpc176x.git
                  ${common.lib_deps}
monitor_speed   = 250000
upload_port     = COM1

#
# FYSETC AIO II v3.2
#
[env:FYSETC_AIOII]
platform          = ststm32
framework         = arduino
board             = genericSTM32F103RC
board_build.core  = maple
platform_packages = tool-stm32duino
build_flags       = ${common.build_flags}
                    -std=gnu++14
                    -g
                    -I include/FYSETC_AIOII
                    -D __BRD_FYSETC_AIOII
                    -D __STM32F1__
                    -D USE_RGB_BACKLIGHT
                    -D ENABLE_USB_SERIAL
                    -D USBD_USE_CDC
                    -D USBCON
build_unflags     = -std=gnu++11 $(common.build_unflags)
extra_scripts     = include/FYSETC_AIOII/FYSETC_AIOII.py
lib_deps          = ${common.lib_deps}
debug_tool        = stlink
upload_protocol   = serial

#
# FYSETC AIO II v3.2 (flashing through SDcard, using FYSECT STM32F103 bootloader)
# https://github.com/FYSETC/Bootloader-STM32F103
#
[env:FYSETC_AIOII_SD]
platform         = ststm32
framework        = arduino
board            = genericSTM32F103RC
board_build.core = maple
build_flags      = ${common.build_flags}
                   -std=gnu++14
                   -g
                   -I include/FYSETC_AIOII
                   -D __BRD_FYSETC_AIOII
                   -D __STM32F1__
                   -D USE_RGB_BACKLIGHT
                   -D ENABLE_USB_SERIAL
                   -D USBD_USE_CDC
                   -D USBCON
build_unflags    = -std=gnu++11 $(common.build_unflags)
extra_scripts    = include/FYSETC_AIOII/FYSETC_AIOII_SD.py
lib_deps         = ${common.lib_deps}
